import {SyncRequest} from "./SyncRequest";
import {SyncRequestConfig} from "./SyncRequestConfig";


/**
 * Handle multiple concurrent and synchronized requests
 */
export class SyncRequests {

    /** Requests to send */
    protected requests: SyncRequest[] = [];

    /** State */
    protected started: boolean = false;

    /** Add a request */
    public addRequest(config: SyncRequestConfig) {
        if (this.started)
            throw new Error("Request already sent");
        this.requests.push(new SyncRequest(config));
    }

    /** Connect and then start most of the headers
     * Beware of the timeouts
     */
    public async start() {
        if (this.started)
            throw new Error("Request already sent");
        this.started = true;
        return await Promise.all(this.requests.map(r => r.start()));
    }

    /**
     * Terminate the request
     */
    public async terminate() {
        return await Promise.all(this.requests.map(r => r.terminate()));
    }
}